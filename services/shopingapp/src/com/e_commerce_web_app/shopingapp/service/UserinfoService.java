/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Cart;
import com.e_commerce_web_app.shopingapp.Orderlist;
import com.e_commerce_web_app.shopingapp.UserAddress;
import com.e_commerce_web_app.shopingapp.Userinfo;

/**
 * Service object for domain model class {@link Userinfo}.
 */
public interface UserinfoService {

    /**
     * Creates a new Userinfo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Userinfo if any.
     *
     * @param userinfo Details of the Userinfo to be created; value cannot be null.
     * @return The newly created Userinfo.
     */
    Userinfo create(@Valid Userinfo userinfo);


	/**
     * Returns Userinfo by given id if exists.
     *
     * @param userinfoId The id of the Userinfo to get; value cannot be null.
     * @return Userinfo associated with the given userinfoId.
	 * @throws EntityNotFoundException If no Userinfo is found.
     */
    Userinfo getById(Integer userinfoId);

    /**
     * Find and return the Userinfo by given id if exists, returns null otherwise.
     *
     * @param userinfoId The id of the Userinfo to get; value cannot be null.
     * @return Userinfo associated with the given userinfoId.
     */
    Userinfo findById(Integer userinfoId);

	/**
     * Find and return the list of Userinfos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userinfoIds The id's of the Userinfo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Userinfos associated with the given userinfoIds.
     */
    List<Userinfo> findByMultipleIds(List<Integer> userinfoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Userinfo. It replaces all fields of the existing Userinfo with the given userinfo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Userinfo if any.
     *
     * @param userinfo The details of the Userinfo to be updated; value cannot be null.
     * @return The updated Userinfo.
     * @throws EntityNotFoundException if no Userinfo is found with given input.
     */
    Userinfo update(@Valid Userinfo userinfo);


    /**
     * Partially updates the details of an existing Userinfo. It updates only the
     * fields of the existing Userinfo which are passed in the userinfoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Userinfo if any.
     *
     * @param userinfoId The id of the Userinfo to be deleted; value cannot be null.
     * @param userinfoPatch The partial data of Userinfo which is supposed to be updated; value cannot be null.
     * @return The updated Userinfo.
     * @throws EntityNotFoundException if no Userinfo is found with given input.
     */
    Userinfo partialUpdate(Integer userinfoId, Map<String, Object> userinfoPatch);

    /**
     * Deletes an existing Userinfo with the given id.
     *
     * @param userinfoId The id of the Userinfo to be deleted; value cannot be null.
     * @return The deleted Userinfo.
     * @throws EntityNotFoundException if no Userinfo found with the given id.
     */
    Userinfo delete(Integer userinfoId);

    /**
     * Deletes an existing Userinfo with the given object.
     *
     * @param userinfo The instance of the Userinfo to be deleted; value cannot be null.
     */
    void delete(Userinfo userinfo);

    /**
     * Find all Userinfos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Userinfos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Userinfo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Userinfos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Userinfos.
     *
     * @see Pageable
     * @see Page
     */
    Page<Userinfo> findAll(String query, Pageable pageable);

    /**
     * Exports all Userinfos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Userinfos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Userinfos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Userinfo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated carts for given Userinfo id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Cart instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Cart> findAssociatedCarts(Integer id, Pageable pageable);

    /*
     * Returns the associated orderlists for given Userinfo id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Orderlist instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Orderlist> findAssociatedOrderlists(Integer id, Pageable pageable);

    /*
     * Returns the associated userAddresses for given Userinfo id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated UserAddress instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserAddress> findAssociatedUserAddresses(Integer id, Pageable pageable);

}