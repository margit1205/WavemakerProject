/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Cart;
import com.e_commerce_web_app.shopingapp.Cartitem;


/**
 * ServiceImpl object for domain model class Cart.
 *
 * @see Cart
 */
@Service("shopingapp.CartService")
@Validated
@EntityService(entityClass = Cart.class, serviceId = "shopingapp")
public class CartServiceImpl implements CartService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CartServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("shopingapp.CartitemService")
    private CartitemService cartitemService;

    @Autowired
    @Qualifier("shopingapp.CartDao")
    private WMGenericDao<Cart, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Cart, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cart create(Cart cart) {
        LOGGER.debug("Creating a new Cart with information: {}", cart);

        Cart cartCreated = this.wmGenericDao.create(cart);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cartCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cart getById(Integer cartId) {
        LOGGER.debug("Finding Cart by id: {}", cartId);
        return this.wmGenericDao.findById(cartId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cart findById(Integer cartId) {
        LOGGER.debug("Finding Cart by id: {}", cartId);
        try {
            return this.wmGenericDao.findById(cartId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Cart found with id: {}", cartId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<Cart> findByMultipleIds(List<Integer> cartIds, boolean orderedReturn) {
        LOGGER.debug("Finding Carts by ids: {}", cartIds);

        return this.wmGenericDao.findByMultipleIds(cartIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cart getByIdAndUserId(int id, Integer userId) {
        Map<String, Object> idAndUserIdMap = new HashMap<>();
        idAndUserIdMap.put("id", id);
        idAndUserIdMap.put("userId", userId);

        LOGGER.debug("Finding Cart by unique keys: {}", idAndUserIdMap);
        return this.wmGenericDao.findByUniqueKey(idAndUserIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public Cart update(Cart cart) {
        LOGGER.debug("Updating Cart with information: {}", cart);

        this.wmGenericDao.update(cart);
        this.wmGenericDao.refresh(cart);

        return cart;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cart partialUpdate(Integer cartId, Map<String, Object>cartPatch) {
        LOGGER.debug("Partially Updating the Cart with id: {}", cartId);

        Cart cart = getById(cartId);

        try {
            ObjectReader cartReader = this.objectMapper.reader().forType(Cart.class).withValueToUpdate(cart);
            cart = cartReader.readValue(this.objectMapper.writeValueAsString(cartPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", cartPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cart = update(cart);

        return cart;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cart delete(Integer cartId) {
        LOGGER.debug("Deleting Cart with id: {}", cartId);
        Cart deleted = this.wmGenericDao.findById(cartId);
        if (deleted == null) {
            LOGGER.debug("No Cart found with id: {}", cartId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Cart.class.getSimpleName(), cartId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(Cart cart) {
        LOGGER.debug("Deleting Cart with {}", cart);
        this.wmGenericDao.delete(cart);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cart> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Carts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cart> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Carts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table Cart to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table Cart to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cartitem> findAssociatedCartitems(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated cartitems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("cart.id = '" + id + "'");

        return cartitemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CartitemService instance
     */
    protected void setCartitemService(CartitemService service) {
        this.cartitemService = service;
    }

}