/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.e_commerce_web_app.shopingapp.Cart;
import com.e_commerce_web_app.shopingapp.Orderlist;
import com.e_commerce_web_app.shopingapp.UserAddress;
import com.e_commerce_web_app.shopingapp.Userinfo;
import com.e_commerce_web_app.shopingapp.service.UserinfoService;


/**
 * Controller object for domain model class Userinfo.
 * @see Userinfo
 */
@RestController("shopingapp.UserinfoController")
@Api(value = "UserinfoController", description = "Exposes APIs to work with Userinfo resource.")
@RequestMapping("/shopingapp/Userinfo")
public class UserinfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserinfoController.class);

    @Autowired
	@Qualifier("shopingapp.UserinfoService")
	private UserinfoService userinfoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Userinfo instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userinfo createUserinfo(@RequestBody Userinfo userinfo) {
		LOGGER.debug("Create Userinfo with information: {}" , userinfo);

		userinfo = userinfoService.create(userinfo);
		LOGGER.debug("Created Userinfo with information: {}" , userinfo);

	    return userinfo;
	}

    @ApiOperation(value = "Returns the Userinfo instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userinfo getUserinfo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Userinfo with id: {}" , id);

        Userinfo foundUserinfo = userinfoService.getById(id);
        LOGGER.debug("Userinfo details with id: {}" , foundUserinfo);

        return foundUserinfo;
    }

    @ApiOperation(value = "Updates the Userinfo instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userinfo editUserinfo(@PathVariable("id") Integer id, @RequestBody Userinfo userinfo) {
        LOGGER.debug("Editing Userinfo with id: {}" , userinfo.getId());

        userinfo.setId(id);
        userinfo = userinfoService.update(userinfo);
        LOGGER.debug("Userinfo details with id: {}" , userinfo);

        return userinfo;
    }
    
    @ApiOperation(value = "Partially updates the Userinfo instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userinfo patchUserinfo(@PathVariable("id") Integer id, @RequestBody @MapTo(Userinfo.class) Map<String, Object> userinfoPatch) {
        LOGGER.debug("Partially updating Userinfo with id: {}" , id);

        Userinfo userinfo = userinfoService.partialUpdate(id, userinfoPatch);
        LOGGER.debug("Userinfo details after partial update: {}" , userinfo);

        return userinfo;
    }

    @ApiOperation(value = "Deletes the Userinfo instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserinfo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Userinfo with id: {}" , id);

        Userinfo deletedUserinfo = userinfoService.delete(id);

        return deletedUserinfo != null;
    }

    /**
     * @deprecated Use {@link #findUserinfos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Userinfo instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userinfo> searchUserinfosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Userinfos list by query filter:{}", (Object) queryFilters);
        return userinfoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userinfo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userinfo> findUserinfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userinfos list by filter:", query);
        return userinfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userinfo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userinfo> filterUserinfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userinfos list by filter", query);
        return userinfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserinfos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userinfoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportUserinfosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Userinfo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userinfoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Userinfo instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserinfos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Userinfos");
		return userinfoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserinfoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userinfoService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/carts")
    @ApiOperation(value = "Gets the carts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cart> findAssociatedCarts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated carts");
        return userinfoService.findAssociatedCarts(id, pageable);
    }

    @GetMapping(value="/{id:.+}/orderlists")
    @ApiOperation(value = "Gets the orderlists instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Orderlist> findAssociatedOrderlists(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated orderlists");
        return userinfoService.findAssociatedOrderlists(id, pageable);
    }

    @GetMapping(value="/{id:.+}/userAddresses")
    @ApiOperation(value = "Gets the userAddresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserAddress> findAssociatedUserAddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userAddresses");
        return userinfoService.findAssociatedUserAddresses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserinfoService instance
	 */
	protected void setUserinfoService(UserinfoService service) {
		this.userinfoService = service;
	}

}