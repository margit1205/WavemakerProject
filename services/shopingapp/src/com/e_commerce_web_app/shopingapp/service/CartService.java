/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Cart;
import com.e_commerce_web_app.shopingapp.Cartitem;

/**
 * Service object for domain model class {@link Cart}.
 */
public interface CartService {

    /**
     * Creates a new Cart. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cart if any.
     *
     * @param cart Details of the Cart to be created; value cannot be null.
     * @return The newly created Cart.
     */
    Cart create(@Valid Cart cart);


	/**
     * Returns Cart by given id if exists.
     *
     * @param cartId The id of the Cart to get; value cannot be null.
     * @return Cart associated with the given cartId.
	 * @throws EntityNotFoundException If no Cart is found.
     */
    Cart getById(Integer cartId);

    /**
     * Find and return the Cart by given id if exists, returns null otherwise.
     *
     * @param cartId The id of the Cart to get; value cannot be null.
     * @return Cart associated with the given cartId.
     */
    Cart findById(Integer cartId);

	/**
     * Find and return the list of Carts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param cartIds The id's of the Cart to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Carts associated with the given cartIds.
     */
    List<Cart> findByMultipleIds(List<Integer> cartIds, boolean orderedReturn);

    /**
     * Find and return the Cart for given id  anduserId  if exists.
     *
     * @param id value of id; value cannot be null.
     * @param userId value of userId; value cannot be null.
     * @return Cart associated with the given inputs.
     * @throws EntityNotFoundException if no matching Cart found.
     */
    Cart getByIdAndUserId(int id, Integer userId);

    /**
     * Updates the details of an existing Cart. It replaces all fields of the existing Cart with the given cart.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cart if any.
     *
     * @param cart The details of the Cart to be updated; value cannot be null.
     * @return The updated Cart.
     * @throws EntityNotFoundException if no Cart is found with given input.
     */
    Cart update(@Valid Cart cart);


    /**
     * Partially updates the details of an existing Cart. It updates only the
     * fields of the existing Cart which are passed in the cartPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Cart if any.
     *
     * @param cartId The id of the Cart to be deleted; value cannot be null.
     * @param cartPatch The partial data of Cart which is supposed to be updated; value cannot be null.
     * @return The updated Cart.
     * @throws EntityNotFoundException if no Cart is found with given input.
     */
    Cart partialUpdate(Integer cartId, Map<String, Object> cartPatch);

    /**
     * Deletes an existing Cart with the given id.
     *
     * @param cartId The id of the Cart to be deleted; value cannot be null.
     * @return The deleted Cart.
     * @throws EntityNotFoundException if no Cart found with the given id.
     */
    Cart delete(Integer cartId);

    /**
     * Deletes an existing Cart with the given object.
     *
     * @param cart The instance of the Cart to be deleted; value cannot be null.
     */
    void delete(Cart cart);

    /**
     * Find all Carts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Carts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Cart> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Carts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Carts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Cart> findAll(String query, Pageable pageable);

    /**
     * Exports all Carts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Carts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Carts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Cart.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated cartitems for given Cart id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Cartitem instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Cartitem> findAssociatedCartitems(Integer id, Pageable pageable);

}