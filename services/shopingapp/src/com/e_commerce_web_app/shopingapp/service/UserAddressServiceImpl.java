/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Orderlist;
import com.e_commerce_web_app.shopingapp.UserAddress;


/**
 * ServiceImpl object for domain model class UserAddress.
 *
 * @see UserAddress
 */
@Service("shopingapp.UserAddressService")
@Validated
@EntityService(entityClass = UserAddress.class, serviceId = "shopingapp")
public class UserAddressServiceImpl implements UserAddressService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserAddressServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("shopingapp.OrderlistService")
    private OrderlistService orderlistService;

    @Autowired
    @Qualifier("shopingapp.UserAddressDao")
    private WMGenericDao<UserAddress, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserAddress, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public UserAddress create(UserAddress userAddress) {
        LOGGER.debug("Creating a new UserAddress with information: {}", userAddress);

        UserAddress userAddressCreated = this.wmGenericDao.create(userAddress);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userAddressCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public UserAddress getById(Integer useraddressId) {
        LOGGER.debug("Finding UserAddress by id: {}", useraddressId);
        return this.wmGenericDao.findById(useraddressId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public UserAddress findById(Integer useraddressId) {
        LOGGER.debug("Finding UserAddress by id: {}", useraddressId);
        try {
            return this.wmGenericDao.findById(useraddressId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserAddress found with id: {}", useraddressId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<UserAddress> findByMultipleIds(List<Integer> useraddressIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserAddresses by ids: {}", useraddressIds);

        return this.wmGenericDao.findByMultipleIds(useraddressIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public UserAddress update(UserAddress userAddress) {
        LOGGER.debug("Updating UserAddress with information: {}", userAddress);

        this.wmGenericDao.update(userAddress);
        this.wmGenericDao.refresh(userAddress);

        return userAddress;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public UserAddress partialUpdate(Integer useraddressId, Map<String, Object>userAddressPatch) {
        LOGGER.debug("Partially Updating the UserAddress with id: {}", useraddressId);

        UserAddress userAddress = getById(useraddressId);

        try {
            ObjectReader userAddressReader = this.objectMapper.reader().forType(UserAddress.class).withValueToUpdate(userAddress);
            userAddress = userAddressReader.readValue(this.objectMapper.writeValueAsString(userAddressPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userAddressPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userAddress = update(userAddress);

        return userAddress;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public UserAddress delete(Integer useraddressId) {
        LOGGER.debug("Deleting UserAddress with id: {}", useraddressId);
        UserAddress deleted = this.wmGenericDao.findById(useraddressId);
        if (deleted == null) {
            LOGGER.debug("No UserAddress found with id: {}", useraddressId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserAddress.class.getSimpleName(), useraddressId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(UserAddress userAddress) {
        LOGGER.debug("Deleting UserAddress with {}", userAddress);
        this.wmGenericDao.delete(userAddress);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<UserAddress> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserAddresses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<UserAddress> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserAddresses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table UserAddress to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table UserAddress to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Orderlist> findAssociatedOrderlists(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderlists");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userAddress.id = '" + id + "'");

        return orderlistService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OrderlistService instance
     */
    protected void setOrderlistService(OrderlistService service) {
        this.orderlistService = service;
    }

}