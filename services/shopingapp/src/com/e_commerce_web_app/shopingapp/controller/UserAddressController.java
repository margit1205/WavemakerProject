/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.e_commerce_web_app.shopingapp.Orderlist;
import com.e_commerce_web_app.shopingapp.UserAddress;
import com.e_commerce_web_app.shopingapp.service.UserAddressService;


/**
 * Controller object for domain model class UserAddress.
 * @see UserAddress
 */
@RestController("shopingapp.UserAddressController")
@Api(value = "UserAddressController", description = "Exposes APIs to work with UserAddress resource.")
@RequestMapping("/shopingapp/UserAddress")
public class UserAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserAddressController.class);

    @Autowired
	@Qualifier("shopingapp.UserAddressService")
	private UserAddressService userAddressService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserAddress instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserAddress createUserAddress(@RequestBody UserAddress userAddress) {
		LOGGER.debug("Create UserAddress with information: {}" , userAddress);

		userAddress = userAddressService.create(userAddress);
		LOGGER.debug("Created UserAddress with information: {}" , userAddress);

	    return userAddress;
	}

    @ApiOperation(value = "Returns the UserAddress instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserAddress getUserAddress(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting UserAddress with id: {}" , id);

        UserAddress foundUserAddress = userAddressService.getById(id);
        LOGGER.debug("UserAddress details with id: {}" , foundUserAddress);

        return foundUserAddress;
    }

    @ApiOperation(value = "Updates the UserAddress instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserAddress editUserAddress(@PathVariable("id") Integer id, @RequestBody UserAddress userAddress) {
        LOGGER.debug("Editing UserAddress with id: {}" , userAddress.getId());

        userAddress.setId(id);
        userAddress = userAddressService.update(userAddress);
        LOGGER.debug("UserAddress details with id: {}" , userAddress);

        return userAddress;
    }
    
    @ApiOperation(value = "Partially updates the UserAddress instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserAddress patchUserAddress(@PathVariable("id") Integer id, @RequestBody @MapTo(UserAddress.class) Map<String, Object> userAddressPatch) {
        LOGGER.debug("Partially updating UserAddress with id: {}" , id);

        UserAddress userAddress = userAddressService.partialUpdate(id, userAddressPatch);
        LOGGER.debug("UserAddress details after partial update: {}" , userAddress);

        return userAddress;
    }

    @ApiOperation(value = "Deletes the UserAddress instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserAddress(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting UserAddress with id: {}" , id);

        UserAddress deletedUserAddress = userAddressService.delete(id);

        return deletedUserAddress != null;
    }

    /**
     * @deprecated Use {@link #findUserAddresses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserAddress instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserAddress> searchUserAddressesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserAddresses list by query filter:{}", (Object) queryFilters);
        return userAddressService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserAddress instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserAddress> findUserAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserAddresses list by filter:", query);
        return userAddressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserAddress instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserAddress> filterUserAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserAddresses list by filter", query);
        return userAddressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserAddresses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userAddressService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportUserAddressesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserAddress.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userAddressService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserAddress instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserAddresses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserAddresses");
		return userAddressService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserAddressAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userAddressService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/orderlists")
    @ApiOperation(value = "Gets the orderlists instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Orderlist> findAssociatedOrderlists(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated orderlists");
        return userAddressService.findAssociatedOrderlists(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserAddressService instance
	 */
	protected void setUserAddressService(UserAddressService service) {
		this.userAddressService = service;
	}

}