/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.e_commerce_web_app.shopingapp.OrderItem;
import com.e_commerce_web_app.shopingapp.service.OrderItemService;


/**
 * Controller object for domain model class OrderItem.
 * @see OrderItem
 */
@RestController("shopingapp.OrderItemController")
@Api(value = "OrderItemController", description = "Exposes APIs to work with OrderItem resource.")
@RequestMapping("/shopingapp/OrderItem")
public class OrderItemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderItemController.class);

    @Autowired
	@Qualifier("shopingapp.OrderItemService")
	private OrderItemService orderItemService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OrderItem instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OrderItem createOrderItem(@RequestBody OrderItem orderItem) {
		LOGGER.debug("Create OrderItem with information: {}" , orderItem);

		orderItem = orderItemService.create(orderItem);
		LOGGER.debug("Created OrderItem with information: {}" , orderItem);

	    return orderItem;
	}

    @ApiOperation(value = "Returns the OrderItem instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OrderItem getOrderItem(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OrderItem with id: {}" , id);

        OrderItem foundOrderItem = orderItemService.getById(id);
        LOGGER.debug("OrderItem details with id: {}" , foundOrderItem);

        return foundOrderItem;
    }

    @ApiOperation(value = "Updates the OrderItem instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OrderItem editOrderItem(@PathVariable("id") Integer id, @RequestBody OrderItem orderItem) {
        LOGGER.debug("Editing OrderItem with id: {}" , orderItem.getId());

        orderItem.setId(id);
        orderItem = orderItemService.update(orderItem);
        LOGGER.debug("OrderItem details with id: {}" , orderItem);

        return orderItem;
    }
    
    @ApiOperation(value = "Partially updates the OrderItem instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OrderItem patchOrderItem(@PathVariable("id") Integer id, @RequestBody @MapTo(OrderItem.class) Map<String, Object> orderItemPatch) {
        LOGGER.debug("Partially updating OrderItem with id: {}" , id);

        OrderItem orderItem = orderItemService.partialUpdate(id, orderItemPatch);
        LOGGER.debug("OrderItem details after partial update: {}" , orderItem);

        return orderItem;
    }

    @ApiOperation(value = "Deletes the OrderItem instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOrderItem(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OrderItem with id: {}" , id);

        OrderItem deletedOrderItem = orderItemService.delete(id);

        return deletedOrderItem != null;
    }

    /**
     * @deprecated Use {@link #findOrderItems(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OrderItem instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OrderItem> searchOrderItemsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OrderItems list by query filter:{}", (Object) queryFilters);
        return orderItemService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OrderItem instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OrderItem> findOrderItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OrderItems list by filter:", query);
        return orderItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OrderItem instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OrderItem> filterOrderItems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OrderItems list by filter", query);
        return orderItemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOrderItems(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return orderItemService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOrderItemsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OrderItem.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> orderItemService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OrderItem instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOrderItems( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OrderItems");
		return orderItemService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOrderItemAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return orderItemService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrderItemService instance
	 */
	protected void setOrderItemService(OrderItemService service) {
		this.orderItemService = service;
	}

}