/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Contact;


/**
 * ServiceImpl object for domain model class Contact.
 *
 * @see Contact
 */
@Service("shopingapp.ContactService")
@Validated
@EntityService(entityClass = Contact.class, serviceId = "shopingapp")
public class ContactServiceImpl implements ContactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContactServiceImpl.class);


    @Autowired
    @Qualifier("shopingapp.ContactDao")
    private WMGenericDao<Contact, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Contact, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Contact create(Contact contact) {
        LOGGER.debug("Creating a new Contact with information: {}", contact);

        Contact contactCreated = this.wmGenericDao.create(contact);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(contactCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Contact getById(Integer contactId) {
        LOGGER.debug("Finding Contact by id: {}", contactId);
        return this.wmGenericDao.findById(contactId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Contact findById(Integer contactId) {
        LOGGER.debug("Finding Contact by id: {}", contactId);
        try {
            return this.wmGenericDao.findById(contactId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Contact found with id: {}", contactId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<Contact> findByMultipleIds(List<Integer> contactIds, boolean orderedReturn) {
        LOGGER.debug("Finding Contacts by ids: {}", contactIds);

        return this.wmGenericDao.findByMultipleIds(contactIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public Contact update(Contact contact) {
        LOGGER.debug("Updating Contact with information: {}", contact);

        this.wmGenericDao.update(contact);
        this.wmGenericDao.refresh(contact);

        return contact;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Contact partialUpdate(Integer contactId, Map<String, Object>contactPatch) {
        LOGGER.debug("Partially Updating the Contact with id: {}", contactId);

        Contact contact = getById(contactId);

        try {
            ObjectReader contactReader = this.objectMapper.reader().forType(Contact.class).withValueToUpdate(contact);
            contact = contactReader.readValue(this.objectMapper.writeValueAsString(contactPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", contactPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        contact = update(contact);

        return contact;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Contact delete(Integer contactId) {
        LOGGER.debug("Deleting Contact with id: {}", contactId);
        Contact deleted = this.wmGenericDao.findById(contactId);
        if (deleted == null) {
            LOGGER.debug("No Contact found with id: {}", contactId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Contact.class.getSimpleName(), contactId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(Contact contact) {
        LOGGER.debug("Deleting Contact with {}", contact);
        this.wmGenericDao.delete(contact);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Contact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Contacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Contact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Contacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table Contact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table Contact to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}