/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.e_commerce_web_app.shopingapp.Cateogry;
import com.e_commerce_web_app.shopingapp.Product;
import com.e_commerce_web_app.shopingapp.service.CateogryService;


/**
 * Controller object for domain model class Cateogry.
 * @see Cateogry
 */
@RestController("shopingapp.CateogryController")
@Api(value = "CateogryController", description = "Exposes APIs to work with Cateogry resource.")
@RequestMapping("/shopingapp/Cateogry")
public class CateogryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CateogryController.class);

    @Autowired
	@Qualifier("shopingapp.CateogryService")
	private CateogryService cateogryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Cateogry instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cateogry createCateogry(@RequestBody Cateogry cateogry) {
		LOGGER.debug("Create Cateogry with information: {}" , cateogry);

		cateogry = cateogryService.create(cateogry);
		LOGGER.debug("Created Cateogry with information: {}" , cateogry);

	    return cateogry;
	}

    @ApiOperation(value = "Returns the Cateogry instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cateogry getCateogry(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Cateogry with id: {}" , id);

        Cateogry foundCateogry = cateogryService.getById(id);
        LOGGER.debug("Cateogry details with id: {}" , foundCateogry);

        return foundCateogry;
    }

    @ApiOperation(value = "Updates the Cateogry instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cateogry editCateogry(@PathVariable("id") Integer id, @RequestBody Cateogry cateogry) {
        LOGGER.debug("Editing Cateogry with id: {}" , cateogry.getId());

        cateogry.setId(id);
        cateogry = cateogryService.update(cateogry);
        LOGGER.debug("Cateogry details with id: {}" , cateogry);

        return cateogry;
    }
    
    @ApiOperation(value = "Partially updates the Cateogry instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cateogry patchCateogry(@PathVariable("id") Integer id, @RequestBody @MapTo(Cateogry.class) Map<String, Object> cateogryPatch) {
        LOGGER.debug("Partially updating Cateogry with id: {}" , id);

        Cateogry cateogry = cateogryService.partialUpdate(id, cateogryPatch);
        LOGGER.debug("Cateogry details after partial update: {}" , cateogry);

        return cateogry;
    }

    @ApiOperation(value = "Deletes the Cateogry instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCateogry(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Cateogry with id: {}" , id);

        Cateogry deletedCateogry = cateogryService.delete(id);

        return deletedCateogry != null;
    }

    /**
     * @deprecated Use {@link #findCateogries(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Cateogry instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cateogry> searchCateogriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Cateogries list by query filter:{}", (Object) queryFilters);
        return cateogryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cateogry instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cateogry> findCateogries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cateogries list by filter:", query);
        return cateogryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cateogry instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cateogry> filterCateogries(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cateogries list by filter", query);
        return cateogryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCateogries(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cateogryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCateogriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Cateogry.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> cateogryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Cateogry instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCateogries( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Cateogries");
		return cateogryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCateogryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cateogryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/products")
    @ApiOperation(value = "Gets the products instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Product> findAssociatedProducts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated products");
        return cateogryService.findAssociatedProducts(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CateogryService instance
	 */
	protected void setCateogryService(CateogryService service) {
		this.cateogryService = service;
	}

}