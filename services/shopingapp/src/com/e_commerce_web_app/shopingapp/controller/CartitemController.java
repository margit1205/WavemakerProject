/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.e_commerce_web_app.shopingapp.Cartitem;
import com.e_commerce_web_app.shopingapp.service.CartitemService;


/**
 * Controller object for domain model class Cartitem.
 * @see Cartitem
 */
@RestController("shopingapp.CartitemController")
@Api(value = "CartitemController", description = "Exposes APIs to work with Cartitem resource.")
@RequestMapping("/shopingapp/Cartitem")
public class CartitemController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CartitemController.class);

    @Autowired
	@Qualifier("shopingapp.CartitemService")
	private CartitemService cartitemService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Cartitem instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cartitem createCartitem(@RequestBody Cartitem cartitem) {
		LOGGER.debug("Create Cartitem with information: {}" , cartitem);

		cartitem = cartitemService.create(cartitem);
		LOGGER.debug("Created Cartitem with information: {}" , cartitem);

	    return cartitem;
	}

    @ApiOperation(value = "Returns the Cartitem instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cartitem getCartitem(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Cartitem with id: {}" , id);

        Cartitem foundCartitem = cartitemService.getById(id);
        LOGGER.debug("Cartitem details with id: {}" , foundCartitem);

        return foundCartitem;
    }

    @ApiOperation(value = "Updates the Cartitem instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cartitem editCartitem(@PathVariable("id") Integer id, @RequestBody Cartitem cartitem) {
        LOGGER.debug("Editing Cartitem with id: {}" , cartitem.getId());

        cartitem.setId(id);
        cartitem = cartitemService.update(cartitem);
        LOGGER.debug("Cartitem details with id: {}" , cartitem);

        return cartitem;
    }
    
    @ApiOperation(value = "Partially updates the Cartitem instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Cartitem patchCartitem(@PathVariable("id") Integer id, @RequestBody @MapTo(Cartitem.class) Map<String, Object> cartitemPatch) {
        LOGGER.debug("Partially updating Cartitem with id: {}" , id);

        Cartitem cartitem = cartitemService.partialUpdate(id, cartitemPatch);
        LOGGER.debug("Cartitem details after partial update: {}" , cartitem);

        return cartitem;
    }

    @ApiOperation(value = "Deletes the Cartitem instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCartitem(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Cartitem with id: {}" , id);

        Cartitem deletedCartitem = cartitemService.delete(id);

        return deletedCartitem != null;
    }

    /**
     * @deprecated Use {@link #findCartitems(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Cartitem instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cartitem> searchCartitemsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Cartitems list by query filter:{}", (Object) queryFilters);
        return cartitemService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cartitem instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cartitem> findCartitems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cartitems list by filter:", query);
        return cartitemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Cartitem instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Cartitem> filterCartitems(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cartitems list by filter", query);
        return cartitemService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCartitems(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cartitemService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCartitemsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Cartitem.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> cartitemService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Cartitem instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCartitems( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Cartitems");
		return cartitemService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCartitemAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cartitemService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CartitemService instance
	 */
	protected void setCartitemService(CartitemService service) {
		this.cartitemService = service;
	}

}