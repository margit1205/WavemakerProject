/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Cartitem;


/**
 * ServiceImpl object for domain model class Cartitem.
 *
 * @see Cartitem
 */
@Service("shopingapp.CartitemService")
@Validated
@EntityService(entityClass = Cartitem.class, serviceId = "shopingapp")
public class CartitemServiceImpl implements CartitemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CartitemServiceImpl.class);


    @Autowired
    @Qualifier("shopingapp.CartitemDao")
    private WMGenericDao<Cartitem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Cartitem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cartitem create(Cartitem cartitem) {
        LOGGER.debug("Creating a new Cartitem with information: {}", cartitem);

        Cartitem cartitemCreated = this.wmGenericDao.create(cartitem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cartitemCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cartitem getById(Integer cartitemId) {
        LOGGER.debug("Finding Cartitem by id: {}", cartitemId);
        return this.wmGenericDao.findById(cartitemId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cartitem findById(Integer cartitemId) {
        LOGGER.debug("Finding Cartitem by id: {}", cartitemId);
        try {
            return this.wmGenericDao.findById(cartitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Cartitem found with id: {}", cartitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<Cartitem> findByMultipleIds(List<Integer> cartitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding Cartitems by ids: {}", cartitemIds);

        return this.wmGenericDao.findByMultipleIds(cartitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public Cartitem update(Cartitem cartitem) {
        LOGGER.debug("Updating Cartitem with information: {}", cartitem);

        this.wmGenericDao.update(cartitem);
        this.wmGenericDao.refresh(cartitem);

        return cartitem;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cartitem partialUpdate(Integer cartitemId, Map<String, Object>cartitemPatch) {
        LOGGER.debug("Partially Updating the Cartitem with id: {}", cartitemId);

        Cartitem cartitem = getById(cartitemId);

        try {
            ObjectReader cartitemReader = this.objectMapper.reader().forType(Cartitem.class).withValueToUpdate(cartitem);
            cartitem = cartitemReader.readValue(this.objectMapper.writeValueAsString(cartitemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", cartitemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cartitem = update(cartitem);

        return cartitem;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cartitem delete(Integer cartitemId) {
        LOGGER.debug("Deleting Cartitem with id: {}", cartitemId);
        Cartitem deleted = this.wmGenericDao.findById(cartitemId);
        if (deleted == null) {
            LOGGER.debug("No Cartitem found with id: {}", cartitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Cartitem.class.getSimpleName(), cartitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(Cartitem cartitem) {
        LOGGER.debug("Deleting Cartitem with {}", cartitem);
        this.wmGenericDao.delete(cartitem);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cartitem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cartitems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cartitem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cartitems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table Cartitem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table Cartitem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}