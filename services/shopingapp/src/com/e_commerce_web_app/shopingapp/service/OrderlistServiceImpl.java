/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.OrderItem;
import com.e_commerce_web_app.shopingapp.Orderlist;


/**
 * ServiceImpl object for domain model class Orderlist.
 *
 * @see Orderlist
 */
@Service("shopingapp.OrderlistService")
@Validated
@EntityService(entityClass = Orderlist.class, serviceId = "shopingapp")
public class OrderlistServiceImpl implements OrderlistService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderlistServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("shopingapp.OrderItemService")
    private OrderItemService orderItemService;

    @Autowired
    @Qualifier("shopingapp.OrderlistDao")
    private WMGenericDao<Orderlist, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Orderlist, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Orderlist create(Orderlist orderlist) {
        LOGGER.debug("Creating a new Orderlist with information: {}", orderlist);

        Orderlist orderlistCreated = this.wmGenericDao.create(orderlist);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderlistCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Orderlist getById(Integer orderlistId) {
        LOGGER.debug("Finding Orderlist by id: {}", orderlistId);
        return this.wmGenericDao.findById(orderlistId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Orderlist findById(Integer orderlistId) {
        LOGGER.debug("Finding Orderlist by id: {}", orderlistId);
        try {
            return this.wmGenericDao.findById(orderlistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Orderlist found with id: {}", orderlistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<Orderlist> findByMultipleIds(List<Integer> orderlistIds, boolean orderedReturn) {
        LOGGER.debug("Finding Orderlists by ids: {}", orderlistIds);

        return this.wmGenericDao.findByMultipleIds(orderlistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public Orderlist update(Orderlist orderlist) {
        LOGGER.debug("Updating Orderlist with information: {}", orderlist);

        this.wmGenericDao.update(orderlist);
        this.wmGenericDao.refresh(orderlist);

        return orderlist;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Orderlist partialUpdate(Integer orderlistId, Map<String, Object>orderlistPatch) {
        LOGGER.debug("Partially Updating the Orderlist with id: {}", orderlistId);

        Orderlist orderlist = getById(orderlistId);

        try {
            ObjectReader orderlistReader = this.objectMapper.reader().forType(Orderlist.class).withValueToUpdate(orderlist);
            orderlist = orderlistReader.readValue(this.objectMapper.writeValueAsString(orderlistPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", orderlistPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        orderlist = update(orderlist);

        return orderlist;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Orderlist delete(Integer orderlistId) {
        LOGGER.debug("Deleting Orderlist with id: {}", orderlistId);
        Orderlist deleted = this.wmGenericDao.findById(orderlistId);
        if (deleted == null) {
            LOGGER.debug("No Orderlist found with id: {}", orderlistId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Orderlist.class.getSimpleName(), orderlistId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(Orderlist orderlist) {
        LOGGER.debug("Deleting Orderlist with {}", orderlist);
        this.wmGenericDao.delete(orderlist);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Orderlist> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Orderlists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Orderlist> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Orderlists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table Orderlist to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table Orderlist to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<OrderItem> findAssociatedOrderItems(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderItems");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("orderlist.id = '" + id + "'");

        return orderItemService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OrderItemService instance
     */
    protected void setOrderItemService(OrderItemService service) {
        this.orderItemService = service;
    }

}