/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Orderlist;
import com.e_commerce_web_app.shopingapp.UserAddress;

/**
 * Service object for domain model class {@link UserAddress}.
 */
public interface UserAddressService {

    /**
     * Creates a new UserAddress. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserAddress if any.
     *
     * @param userAddress Details of the UserAddress to be created; value cannot be null.
     * @return The newly created UserAddress.
     */
    UserAddress create(@Valid UserAddress userAddress);


	/**
     * Returns UserAddress by given id if exists.
     *
     * @param useraddressId The id of the UserAddress to get; value cannot be null.
     * @return UserAddress associated with the given useraddressId.
	 * @throws EntityNotFoundException If no UserAddress is found.
     */
    UserAddress getById(Integer useraddressId);

    /**
     * Find and return the UserAddress by given id if exists, returns null otherwise.
     *
     * @param useraddressId The id of the UserAddress to get; value cannot be null.
     * @return UserAddress associated with the given useraddressId.
     */
    UserAddress findById(Integer useraddressId);

	/**
     * Find and return the list of UserAddresses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param useraddressIds The id's of the UserAddress to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserAddresses associated with the given useraddressIds.
     */
    List<UserAddress> findByMultipleIds(List<Integer> useraddressIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserAddress. It replaces all fields of the existing UserAddress with the given userAddress.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserAddress if any.
     *
     * @param userAddress The details of the UserAddress to be updated; value cannot be null.
     * @return The updated UserAddress.
     * @throws EntityNotFoundException if no UserAddress is found with given input.
     */
    UserAddress update(@Valid UserAddress userAddress);


    /**
     * Partially updates the details of an existing UserAddress. It updates only the
     * fields of the existing UserAddress which are passed in the userAddressPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserAddress if any.
     *
     * @param useraddressId The id of the UserAddress to be deleted; value cannot be null.
     * @param userAddressPatch The partial data of UserAddress which is supposed to be updated; value cannot be null.
     * @return The updated UserAddress.
     * @throws EntityNotFoundException if no UserAddress is found with given input.
     */
    UserAddress partialUpdate(Integer useraddressId, Map<String, Object> userAddressPatch);

    /**
     * Deletes an existing UserAddress with the given id.
     *
     * @param useraddressId The id of the UserAddress to be deleted; value cannot be null.
     * @return The deleted UserAddress.
     * @throws EntityNotFoundException if no UserAddress found with the given id.
     */
    UserAddress delete(Integer useraddressId);

    /**
     * Deletes an existing UserAddress with the given object.
     *
     * @param userAddress The instance of the UserAddress to be deleted; value cannot be null.
     */
    void delete(UserAddress userAddress);

    /**
     * Find all UserAddresses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserAddresses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserAddress> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserAddresses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserAddresses.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserAddress> findAll(String query, Pageable pageable);

    /**
     * Exports all UserAddresses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserAddresses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserAddresses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserAddress.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated orderlists for given UserAddress id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Orderlist instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Orderlist> findAssociatedOrderlists(Integer id, Pageable pageable);

}