/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.e_commerce_web_app.shopingapp.service.ShopingappQueryExecutorService;
import com.e_commerce_web_app.shopingapp.models.query.*;

@RestController(value = "Shopingapp.QueryExecutionController")
@RequestMapping("/shopingapp/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private ShopingappQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @GetMapping(value = "/queries/CartIdFromUserid")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "select cartid from userid")
    public Page<CartIdFromUseridResponse> executeCartIdFromUserid(@RequestParam(value = "loginuserid") String loginuserid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: CartIdFromUserid");
        Page<CartIdFromUseridResponse> _result = queryService.executeCartIdFromUserid(loginuserid, pageable);
        LOGGER.debug("got the result for named query: CartIdFromUserid, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query CartIdFromUserid")
    @PostMapping(value = "/queries/CartIdFromUserid/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCartIdFromUserid(@RequestParam(value = "loginuserid") String loginuserid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: CartIdFromUserid");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "CartIdFromUserid";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCartIdFromUserid(loginuserid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @PutMapping(value = "/queries/updateOrder")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update order")
    public IntegerWrapper executeUpdateOrder(@Valid @RequestBody UpdateOrderRequest updateOrderRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateOrder");
        Integer _result = queryService.executeUpdateOrder(updateOrderRequest);
        LOGGER.debug("got the result for named query: updateOrder, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @GetMapping(value = "/queries/CartItemCount")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "counting no item in cart of login user")
    public Page<CartItemCountResponse> executeCartItemCount(@RequestParam(value = "userid") String userid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: CartItemCount");
        Page<CartItemCountResponse> _result = queryService.executeCartItemCount(userid, pageable);
        LOGGER.debug("got the result for named query: CartItemCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query CartItemCount")
    @PostMapping(value = "/queries/CartItemCount/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCartItemCount(@RequestParam(value = "userid") String userid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: CartItemCount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "CartItemCount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCartItemCount(userid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @PostMapping(value = "/queries/AddToCart")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "add item to cartitem query")
    public IntegerWrapper executeAddToCart(@Valid @RequestBody AddToCartRequest addToCartRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: AddToCart");
        Integer _result = queryService.executeAddToCart(addToCartRequest);
        LOGGER.debug("got the result for named query: AddToCart, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @DeleteMapping(value = "/queries/RemoveProduct")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete Product from cart list")
    public IntegerWrapper executeRemoveProduct(@RequestParam(value = "itemid") String itemid, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: RemoveProduct");
        Integer _result = queryService.executeRemoveProduct(itemid);
        LOGGER.debug("got the result for named query: RemoveProduct, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @GetMapping(value = "/queries/getProductById")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "using for selecting products")
    public Page<GetProductByIdResponse> executeGetProductById(@RequestParam(value = "proudctid", required = false) Integer proudctid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getProductById");
        Page<GetProductByIdResponse> _result = queryService.executeGetProductById(proudctid, pageable);
        LOGGER.debug("got the result for named query: getProductById, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getProductById")
    @PostMapping(value = "/queries/getProductById/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetProductById(@RequestParam(value = "proudctid", required = false) Integer proudctid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getProductById");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getProductById";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetProductById(proudctid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}