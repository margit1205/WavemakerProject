/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.OrderItem;


/**
 * ServiceImpl object for domain model class OrderItem.
 *
 * @see OrderItem
 */
@Service("shopingapp.OrderItemService")
@Validated
@EntityService(entityClass = OrderItem.class, serviceId = "shopingapp")
public class OrderItemServiceImpl implements OrderItemService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderItemServiceImpl.class);


    @Autowired
    @Qualifier("shopingapp.OrderItemDao")
    private WMGenericDao<OrderItem, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<OrderItem, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public OrderItem create(OrderItem orderItem) {
        LOGGER.debug("Creating a new OrderItem with information: {}", orderItem);

        OrderItem orderItemCreated = this.wmGenericDao.create(orderItem);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderItemCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public OrderItem getById(Integer orderitemId) {
        LOGGER.debug("Finding OrderItem by id: {}", orderitemId);
        return this.wmGenericDao.findById(orderitemId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public OrderItem findById(Integer orderitemId) {
        LOGGER.debug("Finding OrderItem by id: {}", orderitemId);
        try {
            return this.wmGenericDao.findById(orderitemId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OrderItem found with id: {}", orderitemId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<OrderItem> findByMultipleIds(List<Integer> orderitemIds, boolean orderedReturn) {
        LOGGER.debug("Finding OrderItems by ids: {}", orderitemIds);

        return this.wmGenericDao.findByMultipleIds(orderitemIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public OrderItem update(OrderItem orderItem) {
        LOGGER.debug("Updating OrderItem with information: {}", orderItem);

        this.wmGenericDao.update(orderItem);
        this.wmGenericDao.refresh(orderItem);

        return orderItem;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public OrderItem partialUpdate(Integer orderitemId, Map<String, Object>orderItemPatch) {
        LOGGER.debug("Partially Updating the OrderItem with id: {}", orderitemId);

        OrderItem orderItem = getById(orderitemId);

        try {
            ObjectReader orderItemReader = this.objectMapper.reader().forType(OrderItem.class).withValueToUpdate(orderItem);
            orderItem = orderItemReader.readValue(this.objectMapper.writeValueAsString(orderItemPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", orderItemPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        orderItem = update(orderItem);

        return orderItem;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public OrderItem delete(Integer orderitemId) {
        LOGGER.debug("Deleting OrderItem with id: {}", orderitemId);
        OrderItem deleted = this.wmGenericDao.findById(orderitemId);
        if (deleted == null) {
            LOGGER.debug("No OrderItem found with id: {}", orderitemId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), OrderItem.class.getSimpleName(), orderitemId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(OrderItem orderItem) {
        LOGGER.debug("Deleting OrderItem with {}", orderItem);
        this.wmGenericDao.delete(orderItem);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<OrderItem> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OrderItems");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<OrderItem> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OrderItems");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table OrderItem to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table OrderItem to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}