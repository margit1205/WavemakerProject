/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Contact;

/**
 * Service object for domain model class {@link Contact}.
 */
public interface ContactService {

    /**
     * Creates a new Contact. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Contact if any.
     *
     * @param contact Details of the Contact to be created; value cannot be null.
     * @return The newly created Contact.
     */
    Contact create(@Valid Contact contact);


	/**
     * Returns Contact by given id if exists.
     *
     * @param contactId The id of the Contact to get; value cannot be null.
     * @return Contact associated with the given contactId.
	 * @throws EntityNotFoundException If no Contact is found.
     */
    Contact getById(Integer contactId);

    /**
     * Find and return the Contact by given id if exists, returns null otherwise.
     *
     * @param contactId The id of the Contact to get; value cannot be null.
     * @return Contact associated with the given contactId.
     */
    Contact findById(Integer contactId);

	/**
     * Find and return the list of Contacts by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param contactIds The id's of the Contact to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Contacts associated with the given contactIds.
     */
    List<Contact> findByMultipleIds(List<Integer> contactIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Contact. It replaces all fields of the existing Contact with the given contact.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Contact if any.
     *
     * @param contact The details of the Contact to be updated; value cannot be null.
     * @return The updated Contact.
     * @throws EntityNotFoundException if no Contact is found with given input.
     */
    Contact update(@Valid Contact contact);


    /**
     * Partially updates the details of an existing Contact. It updates only the
     * fields of the existing Contact which are passed in the contactPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Contact if any.
     *
     * @param contactId The id of the Contact to be deleted; value cannot be null.
     * @param contactPatch The partial data of Contact which is supposed to be updated; value cannot be null.
     * @return The updated Contact.
     * @throws EntityNotFoundException if no Contact is found with given input.
     */
    Contact partialUpdate(Integer contactId, Map<String, Object> contactPatch);

    /**
     * Deletes an existing Contact with the given id.
     *
     * @param contactId The id of the Contact to be deleted; value cannot be null.
     * @return The deleted Contact.
     * @throws EntityNotFoundException if no Contact found with the given id.
     */
    Contact delete(Integer contactId);

    /**
     * Deletes an existing Contact with the given object.
     *
     * @param contact The instance of the Contact to be deleted; value cannot be null.
     */
    void delete(Contact contact);

    /**
     * Find all Contacts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Contacts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Contact> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Contacts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Contacts.
     *
     * @see Pageable
     * @see Page
     */
    Page<Contact> findAll(String query, Pageable pageable);

    /**
     * Exports all Contacts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Contacts matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Contacts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Contact.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}