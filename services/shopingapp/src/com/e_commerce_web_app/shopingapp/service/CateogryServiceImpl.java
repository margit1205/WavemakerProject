/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.e_commerce_web_app.shopingapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.e_commerce_web_app.shopingapp.Cateogry;
import com.e_commerce_web_app.shopingapp.Product;


/**
 * ServiceImpl object for domain model class Cateogry.
 *
 * @see Cateogry
 */
@Service("shopingapp.CateogryService")
@Validated
@EntityService(entityClass = Cateogry.class, serviceId = "shopingapp")
public class CateogryServiceImpl implements CateogryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CateogryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("shopingapp.ProductService")
    private ProductService productService;

    @Autowired
    @Qualifier("shopingapp.CateogryDao")
    private WMGenericDao<Cateogry, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Cateogry, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cateogry create(Cateogry cateogry) {
        LOGGER.debug("Creating a new Cateogry with information: {}", cateogry);

        Cateogry cateogryCreated = this.wmGenericDao.create(cateogry);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cateogryCreated);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cateogry getById(Integer cateogryId) {
        LOGGER.debug("Finding Cateogry by id: {}", cateogryId);
        return this.wmGenericDao.findById(cateogryId);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Cateogry findById(Integer cateogryId) {
        LOGGER.debug("Finding Cateogry by id: {}", cateogryId);
        try {
            return this.wmGenericDao.findById(cateogryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Cateogry found with id: {}", cateogryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public List<Cateogry> findByMultipleIds(List<Integer> cateogryIds, boolean orderedReturn) {
        LOGGER.debug("Finding Cateogries by ids: {}", cateogryIds);

        return this.wmGenericDao.findByMultipleIds(cateogryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "shopingappTransactionManager")
    @Override
    public Cateogry update(Cateogry cateogry) {
        LOGGER.debug("Updating Cateogry with information: {}", cateogry);

        this.wmGenericDao.update(cateogry);
        this.wmGenericDao.refresh(cateogry);

        return cateogry;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cateogry partialUpdate(Integer cateogryId, Map<String, Object>cateogryPatch) {
        LOGGER.debug("Partially Updating the Cateogry with id: {}", cateogryId);

        Cateogry cateogry = getById(cateogryId);

        try {
            ObjectReader cateogryReader = this.objectMapper.reader().forType(Cateogry.class).withValueToUpdate(cateogry);
            cateogry = cateogryReader.readValue(this.objectMapper.writeValueAsString(cateogryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", cateogryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cateogry = update(cateogry);

        return cateogry;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public Cateogry delete(Integer cateogryId) {
        LOGGER.debug("Deleting Cateogry with id: {}", cateogryId);
        Cateogry deleted = this.wmGenericDao.findById(cateogryId);
        if (deleted == null) {
            LOGGER.debug("No Cateogry found with id: {}", cateogryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Cateogry.class.getSimpleName(), cateogryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "shopingappTransactionManager")
    @Override
    public void delete(Cateogry cateogry) {
        LOGGER.debug("Deleting Cateogry with {}", cateogry);
        this.wmGenericDao.delete(cateogry);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cateogry> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cateogries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Cateogry> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cateogries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service shopingapp for table Cateogry to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service shopingapp for table Cateogry to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "shopingappTransactionManager")
    @Override
    public Page<Product> findAssociatedProducts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated products");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("cateogry.id = '" + id + "'");

        return productService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProductService instance
     */
    protected void setProductService(ProductService service) {
        this.productService = service;
    }

}